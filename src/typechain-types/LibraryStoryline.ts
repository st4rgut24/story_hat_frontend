/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SharedStructs {
  export type ContributionStruct = {
    authorAddr: PromiseOrValue<string>;
    cid: PromiseOrValue<BytesLike>;
    prevCID: PromiseOrValue<BytesLike>;
    nextCIDs: PromiseOrValue<BytesLike>[];
    contribCount: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    leader: PromiseOrValue<string>;
  };

  export type ContributionStructOutput = [
    string,
    string,
    string,
    string[],
    number,
    number,
    string
  ] & {
    authorAddr: string;
    cid: string;
    prevCID: string;
    nextCIDs: string[];
    contribCount: number;
    state: number;
    leader: string;
  };
}

export interface LibraryStorylineInterface extends utils.Interface {
  functions: {};

  events: {
    "storylineEvent(tuple[])": EventFragment;
    "storylineLeaderEvent(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "storylineEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "storylineLeaderEvent"): EventFragment;
}

export interface storylineEventEventObject {
  storyline: SharedStructs.ContributionStructOutput[];
}
export type storylineEventEvent = TypedEvent<
  [SharedStructs.ContributionStructOutput[]],
  storylineEventEventObject
>;

export type storylineEventEventFilter = TypedEventFilter<storylineEventEvent>;

export interface storylineLeaderEventEventObject {
  leader: string;
  cid: string;
}
export type storylineLeaderEventEvent = TypedEvent<
  [string, string],
  storylineLeaderEventEventObject
>;

export type storylineLeaderEventEventFilter =
  TypedEventFilter<storylineLeaderEventEvent>;

export interface LibraryStoryline extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibraryStorylineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "storylineEvent(tuple[])"(storyline?: null): storylineEventEventFilter;
    storylineEvent(storyline?: null): storylineEventEventFilter;

    "storylineLeaderEvent(address,bytes)"(
      leader?: null,
      cid?: null
    ): storylineLeaderEventEventFilter;
    storylineLeaderEvent(
      leader?: null,
      cid?: null
    ): storylineLeaderEventEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
