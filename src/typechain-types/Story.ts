/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Story {
  export type ContributionStruct = {
    authorAddr: PromiseOrValue<string>;
    cid: PromiseOrValue<BytesLike>;
    prevCID: PromiseOrValue<BytesLike>;
    nextCIDs: PromiseOrValue<BytesLike>[];
    contribCount: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    leader: PromiseOrValue<string>;
  };

  export type ContributionStructOutput = [
    string,
    string,
    string,
    string[],
    number,
    number,
    string
  ] & {
    authorAddr: string;
    cid: string;
    prevCID: string;
    nextCIDs: string[];
    contribCount: number;
    state: number;
    leader: string;
  };
}

export interface StoryInterface extends utils.Interface {
  functions: {
    "authorContribCounts(address)": FunctionFragment;
    "bookmarks(address)": FunctionFragment;
    "cid()": FunctionFragment;
    "contribute(bytes,bytes)": FunctionFragment;
    "contributions(bytes)": FunctionFragment;
    "draftVotes(bytes,uint256)": FunctionFragment;
    "getContribution(bytes)": FunctionFragment;
    "getDraftVotes(bytes)": FunctionFragment;
    "getSavedCID()": FunctionFragment;
    "getStoryline(bytes)": FunctionFragment;
    "getStorylineLeader(address[],bytes)": FunctionFragment;
    "initialContribution()": FunctionFragment;
    "publishDraft(bytes,bytes)": FunctionFragment;
    "publishVotes(bytes,uint256)": FunctionFragment;
    "uniqueAuthors(bytes,uint256)": FunctionFragment;
    "uniqueVoters(address)": FunctionFragment;
    "voteToDraft(bytes)": FunctionFragment;
    "voteToPublish(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorContribCounts"
      | "bookmarks"
      | "cid"
      | "contribute"
      | "contributions"
      | "draftVotes"
      | "getContribution"
      | "getDraftVotes"
      | "getSavedCID"
      | "getStoryline"
      | "getStorylineLeader"
      | "initialContribution"
      | "publishDraft"
      | "publishVotes"
      | "uniqueAuthors"
      | "uniqueVoters"
      | "voteToDraft"
      | "voteToPublish"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorContribCounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bookmarks",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "cid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "draftVotes",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContribution",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDraftVotes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSavedCID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStoryline",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorylineLeader",
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishDraft",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "publishVotes",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueAuthors",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueVoters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteToDraft",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteToPublish",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorContribCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bookmarks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draftVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDraftVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSavedCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoryline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorylineLeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishDraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueAuthors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteToDraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteToPublish",
    data: BytesLike
  ): Result;

  events: {
    "storylineEvent(tuple[])": EventFragment;
    "storylineLeaderEvent(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "storylineEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "storylineLeaderEvent"): EventFragment;
}

export interface storylineEventEventObject {
  storyline: Story.ContributionStructOutput[];
}
export type storylineEventEvent = TypedEvent<
  [Story.ContributionStructOutput[]],
  storylineEventEventObject
>;

export type storylineEventEventFilter = TypedEventFilter<storylineEventEvent>;

export interface storylineLeaderEventEventObject {
  leader: string;
  cid: string;
}
export type storylineLeaderEventEvent = TypedEvent<
  [string, string],
  storylineLeaderEventEventObject
>;

export type storylineLeaderEventEventFilter =
  TypedEventFilter<storylineLeaderEventEvent>;

export interface Story extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorContribCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    bookmarks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cid(overrides?: CallOverrides): Promise<[string]>;

    contribute(
      cid: PromiseOrValue<BytesLike>,
      prevCID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, string] & {
        authorAddr: string;
        cid: string;
        prevCID: string;
        contribCount: number;
        state: number;
        leader: string;
      }
    >;

    draftVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContribution(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [Story.ContributionStructOutput] & {
        contribution: Story.ContributionStructOutput;
      }
    >;

    getDraftVotes(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { draftVoters: string[] }>;

    getSavedCID(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStoryline(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStorylineLeader(
      authors: PromiseOrValue<string>[],
      cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialContribution(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, string] & {
        authorAddr: string;
        cid: string;
        prevCID: string;
        contribCount: number;
        state: number;
        leader: string;
      }
    >;

    publishDraft(
      _prevCID: PromiseOrValue<BytesLike>,
      _finalDraftCID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publishVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uniqueAuthors(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uniqueVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteToDraft(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteToPublish(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  authorContribCounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  bookmarks(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  cid(overrides?: CallOverrides): Promise<string>;

  contribute(
    cid: PromiseOrValue<BytesLike>,
    prevCID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number, string] & {
      authorAddr: string;
      cid: string;
      prevCID: string;
      contribCount: number;
      state: number;
      leader: string;
    }
  >;

  draftVotes(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContribution(
    _cid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Story.ContributionStructOutput>;

  getDraftVotes(
    _cid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSavedCID(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStoryline(
    _cid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStorylineLeader(
    authors: PromiseOrValue<string>[],
    cid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialContribution(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number, string] & {
      authorAddr: string;
      cid: string;
      prevCID: string;
      contribCount: number;
      state: number;
      leader: string;
    }
  >;

  publishDraft(
    _prevCID: PromiseOrValue<BytesLike>,
    _finalDraftCID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publishVotes(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  uniqueAuthors(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  uniqueVoters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voteToDraft(
    _cid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteToPublish(
    _cid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorContribCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    bookmarks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    cid(overrides?: CallOverrides): Promise<string>;

    contribute(
      cid: PromiseOrValue<BytesLike>,
      prevCID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Story.ContributionStructOutput>;

    contributions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, string] & {
        authorAddr: string;
        cid: string;
        prevCID: string;
        contribCount: number;
        state: number;
        leader: string;
      }
    >;

    draftVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContribution(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Story.ContributionStructOutput>;

    getDraftVotes(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSavedCID(overrides?: CallOverrides): Promise<string>;

    getStoryline(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Story.ContributionStructOutput[]>;

    getStorylineLeader(
      authors: PromiseOrValue<string>[],
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialContribution(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, string] & {
        authorAddr: string;
        cid: string;
        prevCID: string;
        contribCount: number;
        state: number;
        leader: string;
      }
    >;

    publishDraft(
      _prevCID: PromiseOrValue<BytesLike>,
      _finalDraftCID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    publishVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    uniqueAuthors(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    uniqueVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteToDraft(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteToPublish(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "storylineEvent(tuple[])"(storyline?: null): storylineEventEventFilter;
    storylineEvent(storyline?: null): storylineEventEventFilter;

    "storylineLeaderEvent(address,bytes)"(
      leader?: null,
      cid?: null
    ): storylineLeaderEventEventFilter;
    storylineLeaderEvent(
      leader?: null,
      cid?: null
    ): storylineLeaderEventEventFilter;
  };

  estimateGas: {
    authorContribCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bookmarks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cid(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      cid: PromiseOrValue<BytesLike>,
      prevCID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draftVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContribution(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDraftVotes(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSavedCID(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStoryline(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStorylineLeader(
      authors: PromiseOrValue<string>[],
      cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialContribution(overrides?: CallOverrides): Promise<BigNumber>;

    publishDraft(
      _prevCID: PromiseOrValue<BytesLike>,
      _finalDraftCID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publishVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueAuthors(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteToDraft(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteToPublish(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorContribCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bookmarks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      cid: PromiseOrValue<BytesLike>,
      prevCID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draftVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContribution(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDraftVotes(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSavedCID(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStoryline(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStorylineLeader(
      authors: PromiseOrValue<string>[],
      cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishDraft(
      _prevCID: PromiseOrValue<BytesLike>,
      _finalDraftCID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publishVotes(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueAuthors(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueVoters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteToDraft(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteToPublish(
      _cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
